---
layout: post
title:      "React/Rails Token Auth Flow"
date:       2018-11-15 13:16:55 -0500
permalink:  react_rails_token_auth_flow
---


<p>To get user info from my Rails API to my React frontend I needed a way to authenticate the requests going back and forth between the two. Yes, JWT is the standard for token auth, and devise-jwt is a great way to integrate it with devise. But this was my first time writing such an integration, and this wasn't covered by Flatiron's curriculum so I needed something simpler that I could wrap my head around and not worry too much about configuration. In comes the simple token authentication gem. Here are the steps to set it up. 
</p>
```
*In Gemfile* 
gem 'devise'
gem 'simple_token_authentication', '~> 1.0' 

*In User Model* 
acts_as_token_authenticable 

*In Application Controller* 
acts_as_token_authentication_handler_for User 

*In Migration* 
add_column :users, :authentication_token, :string, limit: 30 
```

<p>Users will now have a token attribute. When you make a post request to your login endpoint (probably to the session controller's create action) with a user's email and password, send back a json with the user's email and token. I stored this information in the user's localStorage.This will later be used in every subsequent request's headers, as X-User-Email: emailHere, and X-User-Token: tokenHere. If the token and email are valid, the user object will be returned, otherwise current_user will be nil. 
</p>
<p> 
To log out, simply create a rails action that will set the current_user's token to nil. A new token will be autogenerated and the old one can no longer access the user's data. You can also clear the user's localStorage on the React side. 
</p>
